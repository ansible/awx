---
# The following variables will be set by the runner of this playbook:
# projects_root: Global location for caching project checkouts and roles and collections
#     should not have trailing slash on end
# local_path: Path within projects_root to use for this project
# project_path: A simple join of projects_root/local_path folders
# scm_url: https://server/repo
# scm_branch: branch/tag/revision (HEAD if unset)
# scm_username: username (only for svn/insights)
# scm_password: password (only for svn/insights)
# scm_accept_hostkey: true/false (only for git, set automatically)
# scm_refspec: a refspec to fetch in addition to obtaining version
# awx_version: Current running version of the awx or tower as a string
# awx_license_type: "open" for AWX; else presume Tower
# awx_host: The host to talk with from the API, should be settings.TOWER_URL_BASE
# awx_oauthtoken: A token to get back into tower for the project sync
# awx_project: The name of the project we are syncing
# awx_organization: The name of the organization the project is in
# commit_message: The commit message for this export
# job_template_ids: The ids of the job tempaltes to export

- hosts: localhost
  gather_facts: false
  connection: local
  name: Run project export
  collections:
    - awx.awx
  tasks:
    - block:
        - name: Check user and email
          fail:
            msg: "User running export must have a first/last name and email address"
          when: "not commit_user or not commit_email or commit_user | replace(' ','') == '' or commit_email == ''"
  
        - name: Create working directory
          tempfile:
            state: directory
          register: temp_dir
  
        - name: Clone project using git
          git:
            dest: "{{ temp_dir.path }}"
            repo: "{{scm_url}}"
            version: "{{scm_branch|quote}}"
            refspec: "{{scm_refspec|default(omit)}}"
            accept_hostkey: "{{scm_accept_hostkey|default(omit)}}"
          register: git_result
  
        - name: Create assets folder if needed
          file:
            state: directory
            path: "{{ temp_dir.path }}/assets"
  
        - name: Run project export
          tower_export:
            job_templates: "{{ item | string }}"
            tower_host: "{{ awx_host }}"
            tower_verify_ssl: false
          register: job_template_export
          loop: "{{ job_template_ids }}"
          loop_control:
            label: "{{ lookup('awx.awx.tower_api', 'job_templates', query_params={ 'id': item }, verify_ssl=false, host=awx_host).name }}"
  
        - name: Write out job templates
          copy:
            dest: "{{ temp_dir.path }}/assets/{{ item.assets.job_templates[0].name }}.yml"
            content: |
              ---
              {{ item.assets.job_templates[0] | to_nice_yaml() }}
          loop: "{{ job_template_export.results }}"
          loop_control:
            label: "{{ item.assets.job_templates[0].name }}"
  
        - name: Git add the changes
          command: 'git add --all'
          args:
            chdir: "{{ temp_dir.path }}"
  
        - name: Git status the the code
          command: 'git status --short'
          args:
            chdir: "{{ temp_dir.path }}"
          register: git_status_result
  
        - name: Fail if there are no changes
          fail:
            msg: "This export updates nothing in the SCM"
          when: git_status_result.stdout | length == 0
  
        # Do we want to do anything if the number of changed files != the number of requested assets to export?
        # We could fail?
  
        - name: Configure commit user in git repo
          git_config:
            name: "{{ item.name }}"
            repo: "{{ temp_dir.path }}"
            scope: "local"
            value: "{{ item.value }}"
          loop:
            - name: "user.name"
              value: "{{ commit_user }}"
            - name: "user.email"
              value: "{{ commit_email }}"
          loop_control:
            label: "{{ item.name }}"
  
        - name: Git commit the changes
          command: 'git commit -m {{ commit_message | quote }} --all'
          args:
            chdir: "{{ temp_dir.path }}"
          failed_when: git_commit_result.rc > 1
          changed_when: git_commit_result.rc == 0
          register: git_commit_result
  
        - name: Git push the changes
          command: 'git push'
          args:
            chdir: "{{ temp_dir.path }}"

      tags:
        - export_git
