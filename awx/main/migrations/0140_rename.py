# Generated by Django 2.2.16 on 2021-04-27 18:07

import awx.main.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0139_isolated_removal'),
    ]

    operations = [
        migrations.AlterField(
            model_name='credential',
            name='credential_type',
            field=models.ForeignKey(
                help_text='Specify the type of credential you want to create. Refer to the documentation for details on each type.',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='credentials',
                to='main.CredentialType',
            ),
        ),
        migrations.AlterField(
            model_name='credential',
            name='inputs',
            field=awx.main.fields.CredentialInputField(
                blank=True, default=dict, help_text='Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax.'
            ),
        ),
        migrations.AlterField(
            model_name='credentialtype',
            name='injectors',
            field=awx.main.fields.CredentialTypeInjectorField(
                blank=True, default=dict, help_text='Enter injectors using either JSON or YAML syntax. Refer to the documentation for example syntax.'
            ),
        ),
        migrations.AlterField(
            model_name='credentialtype',
            name='inputs',
            field=awx.main.fields.CredentialTypeInputField(
                blank=True, default=dict, help_text='Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax.'
            ),
        ),
        migrations.AlterField(
            model_name='inventorysource',
            name='enabled_value',
            field=models.TextField(
                blank=True,
                default='',
                help_text='Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var="status.power_state"and enabled_value="powered_on" with host variables:{   "status": {     "power_state": "powered_on",     "created": "2020-08-04T18:13:04+00:00",     "healthy": true    },    "name": "foobar",    "ip_address": "192.168.2.1"}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled',
            ),
        ),
        migrations.AlterField(
            model_name='inventorysource',
            name='host_filter',
            field=models.TextField(blank=True, default='', help_text='Regex where only matching hosts will be imported.'),
        ),
        migrations.AlterField(
            model_name='inventoryupdate',
            name='enabled_value',
            field=models.TextField(
                blank=True,
                default='',
                help_text='Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var="status.power_state"and enabled_value="powered_on" with host variables:{   "status": {     "power_state": "powered_on",     "created": "2020-08-04T18:13:04+00:00",     "healthy": true    },    "name": "foobar",    "ip_address": "192.168.2.1"}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled',
            ),
        ),
        migrations.AlterField(
            model_name='inventoryupdate',
            name='host_filter',
            field=models.TextField(blank=True, default='', help_text='Regex where only matching hosts will be imported.'),
        ),
        migrations.AlterField(
            model_name='job',
            name='use_fact_cache',
            field=models.BooleanField(
                default=False,
                help_text='If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible.',
            ),
        ),
        migrations.AlterField(
            model_name='jobtemplate',
            name='use_fact_cache',
            field=models.BooleanField(
                default=False,
                help_text='If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible.',
            ),
        ),
    ]
