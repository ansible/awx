---
# Creating Workflow Node
- name: Create the Workflow Node
  workflow_job_template_node:
    identifier:                     "{{ __workflow_loop_node_item.identifier | mandatory }}"   # internal identification ID
    extra_data:                     "{{ __workflow_loop_node_item.extra_data | default(omit, true) }}"
    inventory:                      "{{ __workflow_loop_node_item.inventory | default(omit, true) }}"
    scm_branch:                     "{{ __workflow_loop_node_item.scm_branch | default(omit, true) }}"
    job_type:                       "{{ __workflow_loop_node_item.job_type | default(omit, true) }}"
    job_tags:                       "{{ __workflow_loop_node_item.job_tags | default(omit, true) }}"
    skip_tags:                      "{{ __workflow_loop_node_item.skip_tags | default(omit, true) }}"
    limit:                          "{{ __workflow_loop_node_item.limit | default(omit, true) }}"
    diff_mode:                      "{{ __workflow_loop_node_item.diff_mode | default(omit) }}"
    verbosity:                      "{{ __workflow_loop_node_item.verbosity | default(omit, true) }}"
    credentials:                    "{{ __workflow_loop_node_item.credentials | default(__workflow_loop_node_item.related.credentials | default([]) | map(attribute='name') | list) | default(omit, true) }}"
    workflow_job_template:          "{{ __workflow_loop_node_item.workflow_job_template.name | default(__workflow_loop_node_item.workflow_job_template | default(omit, true)) }}"
    unified_job_template:           "{{ __workflow_loop_node_item.unified_job_template.name | default(__workflow_loop_node_item.unified_job_template | default(omit, true)) }}"  # Run Job template
    lookup_organization:            "{{ __workflow_loop_node_item.lookup_organization | default(omit, true) }}"
    execution_environment:          "{{ __workflow_loop_node_item.execution_environment.name | default(__workflow_loop_node_item.execution_environment | default(omit, true)) }}"
    forks:                          "{{ __workflow_loop_node_item.forks | default(omit, true) }}"
    instance_groups:                "{{ __workflow_loop_node_item.instance_groups | default(omit, true) }}"
    job_slice_count:                "{{ __workflow_loop_node_item.job_slice_count | default(omit, true) }}"
    labels:                         "{{ __workflow_loop_node_item.labels | default(__workflow_loop_node_item.related.labels | default([]) | map(attribute='name') | list if __workflow_loop_node_item.related.labels is defined else omit) }}"
    timeout:                        "{{ __workflow_loop_node_item.timeout | default(omit, true) }}"
    approval_node:                  "{{ __workflow_loop_node_item.approval_node | default(omit, true) }}"
    workflow:                       "{{ __workflow_loop_item.name | mandatory }}"        # Workflow job template name to associate with
    state:                          "{{ __workflow_loop_node_item.state | default(controller_state | default('present')) }}"
    all_parents_must_converge:      "{{ __workflow_loop_node_item.all_parents_must_converge | default('false') }}"
    organization:                   "{{ __workflow_loop_item.organization.name | default(__workflow_loop_item.organization) }}"  # Workflow job template organization

    # Role Standard Options
    controller_username:            "{{ controller_username | default(omit, true) }}"
    controller_password:            "{{ controller_password | default(omit, true) }}"
    controller_oauthtoken:          "{{ controller_oauthtoken | default(omit, true) }}"
    controller_host:                "{{ controller_hostname | default(omit, true) }}"
    controller_config_file:         "{{ controller_config_file | default(omit, true) }}"
    validate_certs:                 "{{ controller_validate_certs | default(omit) }}"
  loop: "{{ __workflow_loop_item.simplified_workflow_nodes }}"
  loop_control:
    loop_var: __workflow_loop_node_item
  no_log: "{{ workflow_job_templates_secure_logging }}"
  async: 1000
  poll: 0
  register: __workflows_node_async
  changed_when: not __workflows_node_async.changed
  vars:
    ansible_async_dir: '/tmp/.ansible_async'

- name: "Manage Workflows | Wait for finish the workflow creation"
  ansible.builtin.async_status:
    jid: "{{ __workflows_node_async_results_item.ansible_job_id }}"
  register: __workflows_node_async_result
  until: __workflows_node_async_result.finished
  retries: 10
  loop: "{{ __workflows_node_async.results }}"
  loop_control:
    loop_var: __workflows_node_async_results_item
  when: __workflows_node_async_results_item.ansible_job_id is defined
  no_log: "{{ workflow_job_templates_secure_logging }}"
  vars:
    ansible_async_dir: '/tmp/.ansible_async'

# Create links between workflow node
- name: Create links between Workflow Nodes
  workflow_job_template_node:
    identifier:                     "{{ __workflow_loop_node_item.identifier | mandatory }}"
    workflow:                       "{{ __workflow_loop_item.name | mandatory }}"
    always_nodes:                   "{{ __workflow_loop_node_item.always_nodes | default(__workflow_loop_node_item.related.always_nodes | default([], true) | selectattr('identifier', 'defined') | map(attribute='identifier')) | list }}"  # Nodes to advance on always (blue links)
    success_nodes:                  "{{ __workflow_loop_node_item.success_nodes | default(__workflow_loop_node_item.related.success_nodes | default([], true) | selectattr('identifier', 'defined') | map(attribute='identifier')) | list }}"  # Nodes to advance on success (green links)
    failure_nodes:                  "{{ __workflow_loop_node_item.failure_nodes | default(__workflow_loop_node_item.related.failure_nodes | default([], true) | selectattr('identifier', 'defined') | map(attribute='identifier')) | list }}"  # Nodes to advance on failure (red links)
    state:                          "{{ __workflow_loop_node_item.state | default(controller_state | default('present')) }}"
    organization:                   "{{ __workflow_loop_item.organization.name | default(__workflow_loop_item.organization) }}"  # Workflow job template organization
    controller_username:            "{{ controller_username | default(omit, true) }}"
    controller_password:            "{{ controller_password | default(omit, true) }}"
    controller_oauthtoken:          "{{ controller_oauthtoken | default(omit, true) }}"
    controller_host:                "{{ controller_hostname | default(omit, true) }}"
    controller_config_file:         "{{ controller_config_file | default(omit, true) }}"
    validate_certs:                 "{{ controller_validate_certs | default(omit) }}"
  loop: "{{ __workflow_loop_item.simplified_workflow_nodes }}"
  loop_control:
    loop_var: __workflow_loop_node_item
  no_log: "{{ workflow_job_templates_secure_logging }}"
  # Execute only the nodes that define links to the following
  when: ((__workflow_loop_node_item.always_nodes is defined and __workflow_loop_node_item.always_nodes | length > 0) or
        (__workflow_loop_node_item.success_nodes is defined and __workflow_loop_node_item.success_nodes | length > 0) or
        (__workflow_loop_node_item.failure_nodes is defined and __workflow_loop_node_item.failure_nodes | length > 0))
  async: 1000
  poll: 0
  register: __workflows_link_async
  vars:
    ansible_async_dir: '/tmp/.ansible_async'

- name: "Manage Workflows | Wait for finish the workflow creation"
  ansible.builtin.async_status:
    jid: "{{ __workflows_link_async_results_item.ansible_job_id }}"
  register: __workflows_link_async_result
  until: __workflows_link_async_result.finished
  retries: "{{ controller_configuration_workflow_async_retries }}"
  delay: "{{ controller_configuration_workflow_async_delay }}"
  loop: "{{ __workflows_link_async.results }}"
  loop_control:
    loop_var: __workflows_link_async_results_item
  when: __workflows_link_async_results_item.ansible_job_id is defined
  no_log: "{{ workflow_job_templates_secure_logging }}"
  vars:
    ansible_async_dir: '/tmp/.ansible_async'
...
