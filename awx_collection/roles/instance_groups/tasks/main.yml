---
# Add Controller Instance Group
- name: Add Controller Instance Group
  instance_group:
    name: "{{ __controller_instance_group_item.name | mandatory }}"
    new_name: "{{ __controller_instance_group_item.new_name | default(omit, true) }}"
    credential: "{{ __controller_instance_group_item.credential | default(( '' if controller_configuration_instance_groups_enforce_defaults else omit), true) }}"
    is_container_group: "{{ __controller_instance_group_item.is_container_group | default(( false if controller_configuration_instance_groups_enforce_defaults else omit), true) }}"
    policy_instance_percentage: "{{ __controller_instance_group_item.policy_instance_percentage | default(( 0 if controller_configuration_instance_groups_enforce_defaults else omit), true) }}"
    policy_instance_minimum: "{{ __controller_instance_group_item.policy_instance_minimum | default(( 0 if controller_configuration_instance_groups_enforce_defaults else omit), true) }}"
    policy_instance_list: "{{ __controller_instance_group_item.policy_instance_list | default(( [] if controller_configuration_instance_groups_enforce_defaults else omit), true) }}"
    max_concurrent_jobs: "{{ __controller_instance_group_item.max_concurrent_jobs | default(( 0 if controller_configuration_instance_groups_enforce_defaults else omit), true) }}"
    max_forks: "{{ __controller_instance_group_item.max_forks | default(( 0 if controller_configuration_instance_groups_enforce_defaults else omit), true) }}"
    pod_spec_override: "{{ __controller_instance_group_item.pod_spec_override | default(( '' if controller_configuration_instance_groups_enforce_defaults else omit), true) }}"
    instances: "{{ __controller_instance_group_item.instances | default(( [] if controller_configuration_instance_groups_enforce_defaults else omit), true) }}"
    state: "{{ __controller_instance_group_item.state | default(controller_state | default('present')) }}"

    # Role Standard Options
    controller_username: "{{ controller_username | default(omit, true) }}"
    controller_password: "{{ controller_password | default(omit, true) }}"
    controller_oauthtoken: "{{ controller_oauthtoken | default(omit, true) }}"
    controller_host: "{{ controller_hostname | default(omit, true) }}"
    controller_config_file: "{{ controller_config_file | default(omit, true) }}"
    validate_certs: "{{ controller_validate_certs | default(omit) }}"
  loop: "{{ controller_instance_groups }}"
  loop_control:
    loop_var: __controller_instance_group_item
  no_log: "{{ controller_configuration_instance_groups_secure_logging }}"
  when: controller_instance_groups is defined
  async: 1000
  poll: 0
  register: __instance_groups_job_async
  changed_when: not __instance_groups_job_async.changed
  vars:
    ansible_async_dir: '/tmp/.ansible_async'

- name: "Configure Controller instance groups | Wait for finish the instance groups creation"
  ansible.builtin.async_status:
    jid: "{{ __instance_groups_job_async_results_item.ansible_job_id }}"
  register: __instance_groups_job_async_result
  until: __instance_groups_job_async_result.finished
  retries: "{{ controller_configuration_instance_groups_async_retries }}"
  delay: "{{ controller_configuration_instance_groups_async_delay }}"
  loop: "{{ __instance_groups_job_async.results }}"
  loop_control:
    loop_var: __instance_groups_job_async_results_item
  when: __instance_groups_job_async_results_item.ansible_job_id is defined
  no_log: "{{ controller_configuration_instance_groups_secure_logging }}"
  vars:
    ansible_async_dir: '/tmp/.ansible_async'
...
