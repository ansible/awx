---
# The group module is also an ansible.builtin module, but due to supporting both the awx.awx and automation.controller collections
# the FQCN cannot be used here.
- name: Add controller group  # noqa fqcn[action-core]
  group:
    name: "{{ controller_groups_item.name | mandatory }}"
    new_name: "{{ controller_groups_item.new_name | default(omit, true) }}"
    description: "{{ controller_groups_item.description | default(( '' if controller_configuration_groups_enforce_defaults else omit), true) }}"
    inventory: "{{ controller_groups_item.inventory | mandatory }}"
    variables: "{{ controller_groups_item.variables | default(( {} if controller_configuration_groups_enforce_defaults else omit), true) | regex_replace('[ ]{2,}', '') }}"
    hosts: "{{ controller_groups_item.hosts | default(( [] if controller_configuration_groups_enforce_defaults else omit), true) }}"
    children: "{{ controller_groups_item.children | default(( [] if controller_configuration_groups_enforce_defaults else omit), true) }}"
    preserve_existing_hosts: "{{ controller_groups_item.preserve_existing_hosts | default(( false if controller_configuration_groups_enforce_defaults else omit)) }}"
    preserve_existing_children: "{{ controller_groups_item.preserve_existing_children | default(( false if controller_configuration_groups_enforce_defaults else omit)) }}"
    state: "{{ controller_groups_item.state | default(controller_state | default('present')) }}"

    # Role Standard Options
    controller_username: "{{ controller_username | default(omit, true) }}"
    controller_password: "{{ controller_password | default(omit, true) }}"
    controller_oauthtoken: "{{ controller_oauthtoken | default(omit, true) }}"
    controller_host: "{{ controller_hostname | default(omit, true) }}"
    controller_config_file: "{{ controller_config_file | default(omit, true) }}"
    validate_certs: "{{ controller_validate_certs | default(omit) }}"
  loop: "{{ controller_groups }}"
  loop_control:
    loop_var: controller_groups_item
  no_log: "{{ controller_configuration_group_secure_logging }}"
  async: 1000
  poll: 0
  register: __group_job_async
  changed_when: not __group_job_async.changed
  vars:
    ansible_async_dir: '/tmp/.ansible_async'

- name: "Create Controller Group | Wait for finish the Controller Group creation"
  ansible.builtin.async_status:
    jid: "{{ __group_job_async_results_item.ansible_job_id }}"
  register: __group_job_async_result
  until: __group_job_async_result.finished
  retries: "{{ controller_configuration_group_async_retries }}"
  delay: "{{ controller_configuration_group_async_delay }}"
  loop: "{{ __group_job_async.results }}"
  loop_control:
    loop_var: __group_job_async_results_item
  when: __group_job_async_results_item.ansible_job_id is defined
  no_log: "{{ controller_configuration_group_secure_logging }}"
  vars:
    ansible_async_dir: '/tmp/.ansible_async'
...
