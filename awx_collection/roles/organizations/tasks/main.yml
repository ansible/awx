---
- name: Add organizations
  organization:
    name: "{{ __controller_organizations_item.name | mandatory }}"
    description: "{{ __controller_organizations_item.description | default(( '' if controller_configuration_organizations_enforce_defaults else omit), true) }}"
    custom_virtualenv: "{{ __controller_organizations_item.custom_virtualenv | default(omit, true) }}"
    max_hosts: "{{ __controller_organizations_item.max_hosts | default(omit, true) }}"
    instance_groups: "{{ __controller_organizations_item.instance_groups | default(( [] if controller_configuration_organizations_enforce_defaults else omit), true) }}"
    default_environment: "{{ (__controller_organizations_item.default_environment.name | default(__controller_organizations_item.execution_environment | default(omit))) if (assign_default_ee_to_org is defined and assign_default_ee_to_org) else omit }}"
    galaxy_credentials: "{{ (__controller_organizations_item.galaxy_credentials | default(( [] if controller_configuration_organizations_enforce_defaults else omit), true)) if (assign_galaxy_credentials_to_org is defined and assign_galaxy_credentials_to_org) else omit }}"
    notification_templates_approvals: "{{ (__controller_organizations_item.related.notification_templates_approvals | map(attribute='name') | list if __controller_organizations_item.related.notification_templates_approvals is defined) | default(__controller_organizations_item.notification_templates_approvals) | default(( [] if controller_configuration_organizations_enforce_defaults else omit), true) }}"
    notification_templates_started: "{{ (__controller_organizations_item.related.notification_templates_started | map(attribute='name') | list if __controller_organizations_item.related.notification_templates_started is defined) | default(__controller_organizations_item.notification_templates_started) | default(( [] if controller_configuration_organizations_enforce_defaults else omit), true) }}"
    notification_templates_success: "{{ (__controller_organizations_item.related.notification_templates_success | map(attribute='name') | list if __controller_organizations_item.related.notification_templates_success is defined) | default(__controller_organizations_item.notification_templates_success) | default(( [] if controller_configuration_organizations_enforce_defaults else omit), true) }}"
    notification_templates_error: "{{ (__controller_organizations_item.related.notification_templates_error | map(attribute='name') | list if __controller_organizations_item.related.notification_templates_error is defined) | default(__controller_organizations_item.notification_templates_error) | default(( [] if controller_configuration_organizations_enforce_defaults else omit), true) }}"
    state: "{{ __controller_organizations_item.state | default(controller_state | default('present')) }}"

    # Role Standard Options
    controller_username: "{{ controller_username | default(omit, true) }}"
    controller_password: "{{ controller_password | default(omit, true) }}"
    controller_oauthtoken: "{{ controller_oauthtoken | default(omit, true) }}"
    controller_host: "{{ controller_hostname | default(omit, true) }}"
    controller_config_file: "{{ controller_config_file | default(omit, true) }}"
    validate_certs: "{{ controller_validate_certs | default(omit) }}"
  loop: "{{ organizations if organizations is defined else controller_organizations }}"
  loop_control:
    loop_var: __controller_organizations_item
  no_log: "{{ controller_configuration_organizations_secure_logging }}"
  async: 1000
  poll: 0
  register: __organizations_job_async
  changed_when: not __organizations_job_async.changed
  vars:
    ansible_async_dir: '/tmp/.ansible_async'

- name: "Configure Controller Organizations | Wait for finish the organization creation"
  ansible.builtin.async_status:
    jid: "{{ __organizations_job_async_results_item.ansible_job_id }}"
  register: __organizations_job_async_result
  until: __organizations_job_async_result.finished
  retries: "{{ controller_configuration_organizations_async_retries }}"
  delay: "{{ controller_configuration_organizations_async_delay }}"
  loop: "{{ __organizations_job_async.results }}"
  loop_control:
    loop_var: __organizations_job_async_results_item
  when: __organizations_job_async_results_item.ansible_job_id is defined
  no_log: "{{ controller_configuration_organizations_secure_logging }}"
  vars:
    ansible_async_dir: '/tmp/.ansible_async'
...
