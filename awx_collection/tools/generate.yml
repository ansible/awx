---
- name: Generate the awx.awx collection
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    api_url: "https://192.168.56.109"
    generate_for:
#      - credential_types
#      - groups
#      - hosts
#      - inventorues
#      - inventory_sources
#      - organizations
#      - projects
#      - teams
#      - users
      - job_templates
      - credentials
      - notification_templates
      - labels

  module_defaults:
    uri:
      validate_certs: False
      force_basic_auth: True
      url_username: admin
      url_password: admin

  tasks:
    - name: Get date time data
      setup:
        gather_subset: min

    - name: Create module directory
      file:
        state: directory
        name: "modules"
    
    - name: Load api/v2
      uri:
        method: GET
        url: "{{ api_url }}/api/v2/"
      register: endpoints

    - name: Load endpoint options
      uri:
        method: "OPTIONS"
        url: "{{ api_url }}{{ item.value }}"
      loop: "{{ endpoints['json'] | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      register: end_point_options
      when: "item.key in generate_for"

    #- name: Scan POST options for different things
    #  #set_fact:
    #  #  all_options: "{{ all_options | default({}) | combine(options) }}"
    #  debug:
    #    msg: "{{ options }}"
    #  loop: "{{ end_point_options.results }}"
    #  vars:
    #    options: "{{ item | json_query('json.actions.POST.[*]') }}"
    #  loop_control:
    #    label: "{{ item['item']['key'] }}"
    #  when:
    #    - item is not skipped
    #    - options is defined

    #- debug:
    #    msg: "{{ all_options }}"

    #- meta: end_play

    - name: Process endpoint
      template:
        src: "templates/tower_module.j2"
        dest: "modules/tower_{{ item['item']['key'] }}.py"
      loop: "{{ end_point_options['results'] }}"
      loop_control:
        label: "{{ item['item']['key'] }}"
      when: "'json' in item and 'actions' in item['json'] and 'POST' in item['json']['actions']"
      vars:
        item_type: "{{ item['item']['key'] }}"
        human_readable: "{{ item_type | replace('_', ' ') }}"
        singular_item_type: "{{ item['item']['key'] | regex_replace('ies$', 'y') | regex_replace('s$', '') }}"
        type_map:
          bool: 'bool'
          boolean: 'bool'
          choice: 'str'
          datetime: 'str'
          id: 'str'
          int: 'int'
          integer: 'int'
          json: 'dict'
          list: 'list'
          object: 'dict'
          password: 'str'
          string: 'str'
