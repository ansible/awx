---
- name: Generate a random string for names
  set_fact:
    test_id: "{{ lookup('password', '/dev/null chars=ascii_letters length=16') }}"

- name: Generate random names for test objects
  set_fact:
    org_name: "AWX-Collection-tests-tower_organization-org-{{ test_id }}"
    scm_cred_name: "AWX-Collection-tests-tower_workflow_job_template-scm-cred-{{ test_id }}"
    demo_project_name: "AWX-Collection-tests-tower_workflow_job_template-proj-{{ test_id }}"
    jt1_name: "AWX-Collection-tests-tower_workflow_job_template-jt1-{{ test_id }}"
    jt2_name: "AWX-Collection-tests-tower_workflow_job_template-jt2-{{ test_id }}"
    approval_node_name: "AWX-Collection-tests-tower_workflow_approval_node-{{ test_id }}"
    lab1: "AWX-Collection-tests-tower_job_template-lab1-{{ test_id }}"
    wfjt_name: "AWX-Collection-tests-tower_workflow_job_template-wfjt-{{ test_id }}"
    email_not: "AWX-Collection-tests-tower_job_template-email-not-{{ test_id }}"
    webhook_not: "AWX-Collection-tests-tower_notification_template-wehbook-not-{{ test_id }}"
    project_inv: "AWX-Collection-tests-tower_inventory_source-inv-project-{{ lookup('password', '/dev/null chars=ascii_letters length=16') }}"
    project_inv_source: "AWX-Collection-tests-tower_inventory_source-inv-source-project-{{ lookup('password', '/dev/null chars=ascii_letters length=16') }}"

- name: "Create a new organization"
  tower_organization:
    name: "{{ org_name }}"
    galaxy_credentials:
      - Ansible Galaxy
  register: result

- name: Create an SCM Credential
  tower_credential:
    name: "{{ scm_cred_name }}"
    organization: Default
    kind: scm
  register: result

- assert:
    that:
      - "result is changed"

- name: Add email notification
  tower_notification_template:
    name: "{{ email_not }}"
    organization: Default
    notification_type: email
    username: user
    password: s3cr3t
    sender: tower@example.com
    recipients:
      - user1@example.com
    host: smtp.example.com
    port: 25
    use_tls: false
    use_ssl: false
    state: present

- name: Add webhook notification
  tower_notification_template:
    name: "{{ webhook_not }}"
    organization: Default
    notification_type: webhook
    url: http://www.example.com/hook
    headers:
      X-Custom-Header: value123
    state: present
  register: result

- name: Create Labels
  tower_label:
    name: "{{ lab1 }}"
    organization: "{{ item }}"
  loop:
    - Default
    - "{{ org_name }}"

- name: Create a Demo Project
  tower_project:
    name: "{{ demo_project_name }}"
    organization: Default
    state: present
    scm_type: git
    scm_url: https://github.com/ansible/ansible-tower-samples.git
    scm_credential: "{{ scm_cred_name }}"
  register: result

- assert:
    that:
      - "result is changed"

- name: Add a Tower inventory
  tower_inventory:
    description: Test inventory
    organization: Default
    name: "{{ project_inv }}"

- name: Create a source inventory
  tower_inventory_source:
    name: "{{ project_inv_source }}"
    description: Source for Test inventory
    inventory: "{{ project_inv }}"
    source_project: "{{ demo_project_name }}"
    source_path: "/inventories/inventory.ini"
    overwrite: true
    source: scm
  register: result

- assert:
    that:
      - "result is changed"

- name: Create a Job Template
  tower_job_template:
    name: "{{ jt1_name }}"
    project: "{{ demo_project_name }}"
    inventory: Demo Inventory
    playbook: hello_world.yml
    job_type: run
    state: present
  register: result

- assert:
    that:
      - "result is changed"

- name: Create a second Job Template
  tower_job_template:
    name: "{{ jt2_name }}"
    project: "{{ demo_project_name }}"
    inventory: Demo Inventory
    playbook: hello_world.yml
    job_type: run
    state: present
  register: result

- assert:
    that:
      - "result is changed"

- name: Add a Survey to second Job Template
  tower_job_template:
    name: "{{ jt2_name }}"
    organization: Default
    project: "{{ demo_project_name }}"
    inventory: Demo Inventory
    playbook: hello_world.yml
    job_type: run
    state: present
    survey_enabled: true
    survey_spec: '{"spec": [{"index": 0, "question_name": "my question?", "default": "mydef", "variable": "myvar", "type": "text", "required": false}], "description": "test", "name": "test"}'
  register: result

- assert:
    that:
      - "result is changed"

- name: Create a workflow job template
  tower_workflow_job_template:
    name: "{{ wfjt_name }}"
    organization: Default
    inventory: Demo Inventory
    extra_vars: {'foo': 'bar', 'another-foo': {'barz': 'bar2'}}
    labels:
      - "{{ lab1 }}"
  register: result

- assert:
    that:
      - "result is changed"

# Node actions do what this schema command used to do
# schema: [{"success": [{"job_template": "{{ jt1_name }}"}], "job_template": "{{ jt2_name }}"}]
- name: Create leaf node
  tower_workflow_job_template_node:
    identifier: leaf
    unified_job_template: "{{ jt2_name }}"
    workflow: "{{ wfjt_name }}"

- name: Create root node
  tower_workflow_job_template_node:
    identifier: root
    unified_job_template: "{{ jt1_name }}"
    workflow: "{{ wfjt_name }}"

- name: Fail if no name is set for approval
  tower_workflow_job_template_node:
    identifier: approval_test
    approval_node:
      description: "{{ approval_node_name }}"
    workflow: "{{ wfjt_name }}"
  register: no_name_results
  ignore_errors: true

- assert:
    that:
      - "no_name_results.msg == 'Approval node name is required to create approval node.'"

- name: Fail if absent and no identifier set
  tower_workflow_job_template_node:
    approval_node:
      description: "{{ approval_node_name }}"
    workflow: "{{ wfjt_name }}"
    state: absent
  register: no_identifier_results
  ignore_errors: true

- assert:
    that:
      - "no_identifier_results.msg == 'missing required arguments: identifier'"

- name: Fail if present and no unified job template set
  tower_workflow_job_template_node:
    identifier: approval_test
    workflow: "{{ wfjt_name }}"
  register: no_unified_results
  ignore_errors: true

- assert:
    that:
      - "no_unified_results.msg == 'state is present but any of the following are missing: unified_job_template, approval_node, success_nodes, always_nodes, failure_nodes'"

- name: Create approval node
  tower_workflow_job_template_node:
    identifier: approval_test
    approval_node:
      name: "{{ approval_node_name }}"
      timeout: 900
    workflow: "{{ wfjt_name }}"

- name: Create link for root node
  tower_workflow_job_template_node:
    identifier: root
    workflow: "{{ wfjt_name }}"
    success_nodes:
      - approval_test
    always_nodes:
      - leaf

- name: Delete approval node
  tower_workflow_job_template_node:
    identifier: approval_test
    approval_node:
      name: "{{ approval_node_name }}"
    state: absent
    workflow: "{{ wfjt_name }}"

- name: Add started notifications to workflow job template
  tower_workflow_job_template:
    name: "{{ wfjt_name }}"
    notification_templates_started:
      - "{{ email_not }}"
      - "{{ webhook_not }}"
  register: result

- assert:
    that:
      - "result is changed"

- name: Re Add started notifications to workflow job template
  tower_workflow_job_template:
    name: "{{ wfjt_name }}"
    notification_templates_started:
      - "{{ email_not }}"
      - "{{ webhook_not }}"
  register: result

- assert:
    that:
      - "result is not changed"

- name: Add success notifications to workflow job template
  tower_workflow_job_template:
    name: "{{ wfjt_name }}"
    notification_templates_success:
      - "{{ email_not }}"
      - "{{ webhook_not }}"
  register: result

- assert:
    that:
      - "result is changed"

- name: Copy a workflow job template
  tower_workflow_job_template:
    name: "copy_{{ wfjt_name }}"
    copy_from: "{{ wfjt_name }}"
    organization: Default
  register: result

- assert:
    that:
      - result.copied

- name: Fail Remove "on start" webhook notification from copied workflow job template
  tower_workflow_job_template:
    name: "copy_{{ wfjt_name }}"
    notification_templates_started:
      - "{{ email_not }}123"
  register: remove_copied_workflow_node
  ignore_errors: true

- assert:
    that:
      - "remove_copied_workflow_node is failed"
      - "remove_copied_workflow_node is not changed"
      - "'returned 0 items' in remove_copied_workflow_node.msg"

- name: Remove "on start" webhook notification from copied workflow job template
  tower_workflow_job_template:
    name: "copy_{{ wfjt_name }}"
    notification_templates_started:
      - "{{ email_not }}"
  register: result

- assert:
    that:
      - "result is changed"

- name: Add Survey to Copied workflow job template
  tower_workflow_job_template:
    name: "copy_{{ wfjt_name }}"
    organization: Default
    survey_spec:
      name: Basic Survey
      description: Basic Survey
      spec:
        - question_description: Name
          min: 0
          default: ''
          max: 128
          required: true
          choices: ''
          new_question: true
          variable: basic_name
          question_name: Basic Name
          type: text
        - question_description: Choosing yes or no.
          min: 0
          default: 'yes'
          max: 0
          required: true
          choices: |-
            yes
            no
          new_question: true
          variable: option_true_false
          question_name: Choose yes or no?
          type: multiplechoice
        - question_description: ''
          min: 0
          default: ''
          max: 0
          required: true
          choices: |-
            group1
            group2
            group3
          new_question: true
          variable: target_groups
          question_name: 'Select Group:'
          type: multiselect
        - question_name: password
          question_description: ''
          required: true
          type: password
          variable: password
          min: 0
          max: 1024
          default: ''
          choices: ''
          new_question: true
  register: result

- assert:
    that:
      - "result is changed"

- name: Re add survey to workflow job template expected not changed.
  tower_workflow_job_template:
    name: "copy_{{ wfjt_name }}"
    organization: Default
    survey_spec:
      name: Basic Survey
      description: Basic Survey
      spec:
        - question_description: Name
          min: 0
          default: ''
          max: 128
          required: true
          choices: ''
          new_question: true
          variable: basic_name
          question_name: Basic Name
          type: text
        - question_description: Choosing yes or no.
          min: 0
          default: 'yes'
          max: 0
          required: true
          choices: |-
            yes
            no
          new_question: true
          variable: option_true_false
          question_name: Choose yes or no?
          type: multiplechoice
        - question_description: ''
          min: 0
          default: ''
          max: 0
          required: true
          choices: |-
            group1
            group2
            group3
          new_question: true
          variable: target_groups
          question_name: 'Select Group:'
          type: multiselect
        - question_name: password
          question_description: ''
          required: true
          type: password
          variable: password
          min: 0
          max: 1024
          default: ''
          choices: ''
          new_question: true
  register: result

- assert:
    that:
      - "result is not changed"

- name: Delete copied workflow job template
  tower_workflow_job_template:
    name: "copy_{{ wfjt_name }}"
    state: absent
  register: result

- assert:
    that:
      - "result is changed"

- name: Remove "on start" webhook notification from workflow job template
  tower_workflow_job_template:
    name: "{{ wfjt_name }}"
    notification_templates_started:
      - "{{ email_not }}"
  register: result

- assert:
    that:
      - "result is changed"

- name: Delete a workflow job template with an invalid inventory and webook_credential
  tower_workflow_job_template:
    name: "{{ wfjt_name }}"
    inventory: "Does Not Exist"
    webhook_credential: "Does Not Exist"
    state: absent
  register: result

- assert:
    that:
      - "result is changed"

- name: Check module fails with correct msg
  tower_workflow_job_template:
    name: "{{ wfjt_name }}"
    organization: Non_Existing_Organization
  register: result
  ignore_errors: true

- assert:
    that:
      - "result is failed"
      - "result is not changed"
      - "'Non_Existing_Organization' in result.msg"
      - "result.total_results == 0"

- name: Create a workflow job template with schema in template
  awx.awx.tower_workflow_job_template:
    name: "{{ wfjt_name }}"
    inventory: Demo Inventory
    extra_vars: {'foo': 'bar', 'another-foo': {'barz': 'bar2'}}
    schema:
      - identifier: node101
        unified_job_template:
          name: "{{ project_inv_source }}"
          inventory:
            organization:
              name: Default
          type: inventory_source
        related:
          failure_nodes:
            - identifier: node201
      - identifier: node201
        unified_job_template:
          organization:
            name: Default
          name: "{{ jt1_name }}"
          type: job_template
        credentials: []
        related:
          success_nodes:
            - identifier: node301
      - identifier: node202
        unified_job_template:
          organization:
            name: Default
          name: "{{ demo_project_name }}"
          type: project
      - all_parents_must_converge: false
        identifier: node301
        unified_job_template:
          organization:
            name: Default
          name: "{{ jt2_name }}"
          type: job_template
  register: result

- assert:
    that:
      - "result is changed"

- name: Kick off a workflow and wait for it
  tower_workflow_launch:
    workflow_template: "{{ wfjt_name }}"
  ignore_errors: true
  register: result

- assert:
    that:
      - result is not failed
      - "'id' in result['job_info']"

- name: Destroy previous schema for one that fails
  awx.awx.tower_workflow_job_template:
    name: "{{ wfjt_name }}"
    destroy_current_schema: true
    schema:
      - identifier: node101
        unified_job_template:
          organization:
            name: Default
          name: "{{ jt1_name }}"
          type: job_template
        credentials: []
        related:
          success_nodes:
            - identifier: node201
      - identifier: node201
        unified_job_template:
          name: "{{ project_inv_source }}"
          inventory:
            organization:
              name: Default
          type: inventory_source
  register: result

- name: Kick off a workflow and wait for it
  tower_workflow_launch:
    workflow_template: "{{ wfjt_name }}"
  ignore_errors: true
  register: result

- assert:
    that:
      - result is failed

- name: Delete a workflow job template
  awx.awx.tower_workflow_job_template:
    name: "{{ wfjt_name }}"
    state: absent
  register: result

- assert:
    that:
      - "result is changed"

- name: Delete the Job Template
  tower_job_template:
    name: "{{ jt1_name }}"
    project: "{{ demo_project_name }}"
    inventory: Demo Inventory
    playbook: hello_world.yml
    job_type: run
    state: absent
  register: result

- assert:
    that:
      - "result is changed"

- name: Delete the second Job Template
  tower_job_template:
    name: "{{ jt2_name }}"
    project: "{{ demo_project_name }}"
    inventory: Demo Inventory
    playbook: hello_world.yml
    job_type: run
    state: absent
  register: result

- assert:
    that:
      - "result is changed"

- name: Delete the inventory source
  tower_inventory_source:
    name: "{{ project_inv_source }}"
    inventory: "{{ project_inv }}"
    source: scm
    state: absent

- assert:
    that:
      - "result is changed"

- name: Delete the inventory
  tower_inventory:
    description: Test inventory
    organization: Default
    name: "{{ project_inv }}"
    state: absent

- assert:
    that:
      - "result is changed"

- name: Delete the Demo Project
  tower_project:
    name: "{{ demo_project_name }}"
    organization: Default
    scm_type: git
    scm_url: https://github.com/ansible/ansible-tower-samples.git
    scm_credential: "{{ scm_cred_name }}"
    state: absent
  register: result

- assert:
    that:
      - "result is changed"

- name: Delete the SCM Credential
  tower_credential:
    name: "{{ scm_cred_name }}"
    organization: Default
    kind: scm
    state: absent
  register: result

- assert:
    that:
      - "result is changed"

- name: Delete email notification
  tower_notification_template:
    name: "{{ email_not }}"
    organization: Default
    state: absent

- name: Delete webhook notification
  tower_notification_template:
    name: "{{ webhook_not }}"
    organization: Default
    state: absent

- name: "Remove the organization"
  tower_organization:
    name: "{{ org_name }}"
    state: absent
  register: result
