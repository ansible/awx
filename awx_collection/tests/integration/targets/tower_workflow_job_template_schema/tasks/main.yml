---
- name: Generate a random string for names
  set_fact:
    test_id: "{{ lookup('password', '/dev/null chars=ascii_letters length=16') }}"

- name: Generate random names for test objects
  set_fact:
    scm_cred_name: "AWX-Collection-tests-tower_workflow_job_template_schema-scm-cred-{{ test_id }}"
    demo_project_name: "AWX-Collection-tests-tower_workflow_job_template_schema-proj-{{ test_id }}"
    jt1_name: "AWX-Collection-tests-tower_workflow_job_template_schema-jt1-{{ test_id }}"
    jt2_name: "AWX-Collection-tests-tower_workflow_job_template_schema-jt2-{{ test_id }}"
    wfjt_name: "AWX-Collection-tests-tower_workflow_job_template_schema-wfjt-{{ test_id }}"
    project_inv: "AWX-Collection-tests-tower_inventory_source-inv-project-{{ lookup('password', '/dev/null chars=ascii_letters length=16') }}"
    project_inv_source: "AWX-Collection-tests-tower_inventory_source-inv-source-project-{{ lookup('password', '/dev/null chars=ascii_letters length=16') }}"

- name: Create an SCM Credential
  awx.awx.tower_credential:
    name: "{{ scm_cred_name }}"
    organization: Default
    kind: scm
  register: result

- assert:
    that:
      - "result is changed"

- name: Create a Demo Project
  awx.awx.tower_project:
    name: "{{ demo_project_name }}"
    organization: Default
    state: present
    scm_type: git
    scm_url: https://github.com/ansible/ansible-tower-samples.git
    scm_credential: "{{ scm_cred_name }}"
  register: result

- assert:
    that:
      - "result is changed"

- name: Add a Tower inventory
  tower_inventory:
    description: Test inventory
    organization: Default
    name: "{{ project_inv }}"

- name: Create a source inventory
  tower_inventory_source:
    name: "{{ project_inv_source }}"
    description: Source for Test inventory
    inventory: "{{ project_inv }}"
    source_project: "{{ demo_project_name }}"
    source_path: "/inventories/inventory.ini"
    overwrite: true
    source: scm
  register: result

- assert:
    that:
      - "result is changed"

- name: Create a Job Template
  awx.awx.tower_job_template:
    name: "{{ jt1_name }}"
    project: "{{ demo_project_name }}"
    inventory: Demo Inventory
    ask_variables_on_launch: true
    playbook: hello_world.yml
    credential: Demo Credential
    job_type: run
    state: present
  register: result

- assert:
    that:
      - "result is changed"

- name: Create a second Job Template
  awx.awx.tower_job_template:
    name: "{{ jt2_name }}"
    project: "{{ demo_project_name }}"
    inventory: Demo Inventory
    playbook: hello_world.yml
    credential: Demo Credential
    job_type: run
    state: present
  register: result

- assert:
    that:
      - "result is changed"

- name: Create a workflow job template
  awx.awx.tower_workflow_job_template:
    name: "{{ wfjt_name }}"
    inventory: Demo Inventory
    extra_vars: {'foo': 'bar', 'another-foo': {'barz': 'bar2'}}
    schema:
      - identifier: node101
        unified_job_template:
          name: "{{ project_inv_source }}"
          inventory:
            organization:
              name: Default
          type: inventory_source
        related:
          failure_nodes:
            - identifier: node201
      - identifier: node201
        extra_data:
          daisy: flower
        unified_job_template:
          organization:
            name: Default
          name: "{{ jt1_name }}"
          type: job_template
        related:
          success_nodes:
            - identifier: node301
      - identifier: node202
        unified_job_template:
          organization:
            name: Default
          name: "{{ demo_project_name }}"
          type: project
      - all_parents_must_converge: false
        identifier: node301
        unified_job_template:
          organization:
            name: Default
          name: "{{ jt2_name }}"
          type: job_template
  register: result

- assert:
    that:
      - "result is changed"

- name: Kick off a workflow and wait for it
  tower_workflow_launch:
    workflow_template: "{{ wfjt_name }}"
  ignore_errors: true
  register: result

- assert:
    that:
      - result is not failed
      - "'id' in result['job_info']"

- name: Destroy previous schema for one that fails
  awx.awx.tower_workflow_job_template:
    name: "{{ wfjt_name }}"
    destroy_current_schema: true
    schema:
      - identifier: node101
        unified_job_template:
          organization:
            name: Default
          name: "{{ jt1_name }}"
        credentials: []
        related:
          success_nodes:
            - identifier: node201
          failure_nodes: []
          always_nodes: []
          credentials: []
      - identifier: node201
        unified_job_template:
          name: "{{ project_inv_source }}"
          inventory:
            organization:
              name: Default
        related:
          success_nodes: []
          failure_nodes: []
          always_nodes: []
          credentials: []
  register: result
  ignore_errors: true

- name: Kick off a workflow and wait for it
  tower_workflow_launch:
    workflow_template: "{{ wfjt_name }}"
  ignore_errors: true
  register: result

- assert:
    that:
      - result is failed

- name: Delete a workflow job template
  awx.awx.tower_workflow_job_template:
    name: "{{ wfjt_name }}"
    state: absent
  register: result

- assert:
    that:
      - "result is changed"

- name: Delete the First Job Template
  awx.awx.tower_job_template:
    name: "{{ jt1_name }}"
    project: "{{ demo_project_name }}"
    inventory: Demo Inventory
    playbook: hello_world.yml
    credential: Demo Credential
    job_type: run
    state: absent
  register: result

- assert:
    that:
      - "result is changed"

- name: Delete the second Job Template
  awx.awx.tower_job_template:
    name: "{{ jt2_name }}"
    project: "{{ demo_project_name }}"
    inventory: Demo Inventory
    playbook: hello_world.yml
    credential: Demo Credential
    job_type: run
    state: absent
  register: result

- assert:
    that:
      - "result is changed"

- name: Delete the inventory source
  tower_inventory_source:
    name: "{{ project_inv_source }}"
    inventory: "{{ project_inv }}"
    source: scm
    state: absent

- assert:
    that:
      - "result is changed"

- name: Delete the inventory
  tower_inventory:
    description: Test inventory
    organization: Default
    name: "{{ project_inv }}"
    state: absent

- assert:
    that:
      - "result is changed"

- name: Delete the Demo Project
  awx.awx.tower_project:
    name: "{{ demo_project_name }}"
    organization: Default
    scm_type: git
    scm_url: https://github.com/ansible/ansible-tower-samples.git
    scm_credential: "{{ scm_cred_name }}"
    state: absent
  register: result

- assert:
    that:
      - "result is changed"

- name: Delete the SCM Credential
  awx.awx.tower_credential:
    name: "{{ scm_cred_name }}"
    organization: Default
    kind: scm
    state: absent
  register: result

- assert:
    that:
      - "result is changed"
